using System;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace BmLauncherWForm
{
    /// <summary>
    ///     Worker for Keybindform. Acts similarly to GraphicsInterpreter
    /// </summary>
    static class KeybindInterpreter
    {
        // part of a string that is constant for every line
        private static readonly string nameConstant = ".Bindings=(Name=\"";

        /// <summary>
        ///     Reads or writes Keybind parameters from UserInput file
        /// </summary>
        /// <param name="lineToCheck">Line to check</param>
        /// <param name="read">Determines if file is being read or written to</param>
        /// <returns>Read input, or new input</returns>
        public static string interpretKeys(string lineToCheck, bool read)
        {
            string placeHolder;
            string readThis;
            if (lineToCheck.Length <= 41 ||
                lineToCheck.Equals("[Generated by Batman: Arkham Asylum Advanced Launcher]"))
            {
                return lineToCheck;
            }

            placeHolder = lineToCheck.Substring(17);
            readThis = stringModifier(lineToCheck, placeHolder);

            //forward
            if (lineToCheck.Contains("MoveForward") && !lineToCheck.Contains("Unbound"))
                if (read)
                {
                    Program.myFactory.keybinds.fwButton.Text = readThis;
                }
                else
                {
                    lineToCheck = stringWriter(Program.myFactory.keybinds.fwButton.Text,
                        "\",Command=\"MoveForward | DebugMenuUpPressed | OnRelease DebugMenuUpReleased | Axis aRawLHJoyUp Speed=1.0\", Shift=false, Control=false, Alt=false, bIgnoreShift=false, bIgnoreCtrl=false, bIgnoreAlt=false):META:COM_FORWARD,0,-1,-1,\"\",false,false,CI_Movement,CI_LeftStick,CI_LeftStickUp");
                }

            //backward
            if (lineToCheck.Contains("MoveBackward") && !lineToCheck.Contains("Unbound"))
            {
                if (read)
                {
                    Program.myFactory.keybinds.bwButton.Text = readThis;
                }
                else
                {
                    lineToCheck = stringWriter(Program.myFactory.keybinds.bwButton.Text,
                        "\",Command=\"MoveBackward | DebugMenuDownPressed | OnRelease DebugMenuDownReleased | Axis aRawLHJoyUp Speed=-1.0\", Shift=false, Control=false, Alt=false, bIgnoreShift=false, bIgnoreCtrl=false, bIgnoreAlt=false):META:COM_BACK,0,-1,-1,\"\",true,false,CI_Movement,CI_LeftStick,CI_LeftStickDown");
                }
            }

            //left
            if (lineToCheck.Contains("StrafeLeft") && !lineToCheck.Contains("Unbound"))
            {
                if (read)
                {
                    Program.myFactory.keybinds.leftButton.Text = readThis;
                }
                else
                {
                    lineToCheck = stringWriter(Program.myFactory.keybinds.leftButton.Text,
                        "\",Command=\"StrafeLeft | DebugMenuLeftPressed | OnRelease DebugMenuLeftReleased | Axis aRawLHJoyRight Speed=-1.0\", Shift=false, Control=false, Alt=false, bIgnoreShift=false, bIgnoreCtrl=false, bIgnoreAlt=false):META:COM_LEFT,0,-1,-1,\"\",false,false,CI_LeftStick,CI_LeftStickLeftAndRight");
                }
            }

            //right
            if (lineToCheck.Contains("StrafeRight") && !lineToCheck.Contains("Unbound"))
            {
                if (read)
                {
                    Program.myFactory.keybinds.rightButton.Text = readThis;
                }
                else
                {
                    lineToCheck = stringWriter(Program.myFactory.keybinds.rightButton.Text,
                        "\",Command=\"StrafeRight | DebugMenuRightPressed | OnRelease DebugMenuRightReleased | Axis aRawLHJoyRight Speed=1.0\", Shift=false, Control=false, Alt=false, bIgnoreShift=false, bIgnoreCtrl=false, bIgnoreAlt=false):META:COM_RIGHT,0,-1,-1,\"\",false,false,CI_LeftStick,CI_LeftStickLeftAndRight");
                }
            }

            //crouch
            if (lineToCheck.Contains("Stealth") && !lineToCheck.Contains("Unbound"))
            {
                if (read)
                {
                    Program.myFactory.keybinds.crouchButton.Text = readThis;
                }
                else
                {
                    lineToCheck = stringWriter(Program.myFactory.keybinds.crouchButton.Text,
                        "\",Command=\"Stealth | CancelBatarangCamera | CancelGadget | ExitAgilityMode | HangFromVantagepoint\", Shift=false, Control=false, Alt=false, bIgnoreShift=false, bIgnoreCtrl=false, bIgnoreAlt=false):META:COM_CROUCH,0,-1,-1,\"bCrouchButton\",false,false,CI_Crouch,CI_Cancel,CI_HangFromVantagePoint");
                }
            }

            //zoom
            if (lineToCheck.Contains("ToggleCameraZoom") && !lineToCheck.Contains("Unbound"))
            {
                if (read)
                {
                    Program.myFactory.keybinds.zoomButton.Text = readThis;
                }
                else
                {
                    lineToCheck = stringWriter(Program.myFactory.keybinds.zoomButton.Text,
                        "\",Command=\"ToggleCameraZoom\", Shift=false, Control=false, Alt=false, bIgnoreShift=false, bIgnoreCtrl=false, bIgnoreAlt=false):META:COM_ZOOM,0,-1,-1,\"\",false,true,CI_Zoom");
                }
            }

            //grapple
            if (lineToCheck.Contains("UseGrapple") && !lineToCheck.Contains("ThumbMouseButton"))
            {
                if (read)
                {
                    Program.myFactory.keybinds.grappleButton.Text = readThis;
                }
                else
                {
                    lineToCheck = stringWriter(Program.myFactory.keybinds.grappleButton.Text,
                        "\",Command=\"Grapple\", Shift=false, Control=false, Alt=false, bIgnoreShift=false, bIgnoreCtrl=false, bIgnoreAlt=false):META:COM_GRAPPLE,0,-1,-1,\"\",false,true,CI_UseGrapple");
                }
            }

            //crouchToggle
            if (lineToCheck.Contains("ToggleCrouch") && !lineToCheck.Contains("Unbound"))
            {
                if (read)
                {
                    Program.myFactory.keybinds.crouchToggleButton.Text = readThis;
                }
                else
                {
                    lineToCheck = stringWriter(Program.myFactory.keybinds.crouchToggleButton.Text,
                        "\",Command=\"ToggleCrouch\", Shift=false, Control=false, Alt=false, bIgnoreShift=false, bIgnoreCtrl=false, bIgnoreAlt=false):META:COM_CROUCH_TOGGLE,0,-1,-1,\"\",false,true,CI_ToggleCrouch");
                }
            }

            //run/glide/use
            if (lineToCheck.Contains(
                    "ContextSensitive | Run | CapeGlide | AcceptConversation | Evade | CancelBatarangCamera") &&
                !lineToCheck.Contains("Unbound"))
            {
                if (read)
                {
                    Program.myFactory.keybinds.RGUButton.Text = readThis;
                }
                else
                {
                    lineToCheck = stringWriter(Program.myFactory.keybinds.RGUButton.Text,
                        "\",Command=\"ContextSensitive | Run | CapeGlide | AcceptConversation | Evade | CancelBatarangCamera\", Shift=false, Control=false, Alt=false, bIgnoreShift=false, bIgnoreCtrl=false, bIgnoreAlt=false):META:COM_RUN_GLIDE_USE,0,-1,-1,\"bRunButton\",false,false,CI_RunGlide,CI_Interact");
                }
            }

            //quick batarang
            if (lineToCheck.Contains("QuickBatarang") && !lineToCheck.Contains("ThumbMouseButton2"))
            {
                if (read)
                {
                    Program.myFactory.keybinds.quickBatButton.Text = readThis;
                }
                else
                {
                    lineToCheck = stringWriter(Program.myFactory.keybinds.quickBatButton.Text,
                        "\",Command=\"DebugMenuPrevPage | QuickBatarang\", Shift=false, Control=false, Alt=false, bIgnoreShift=false, bIgnoreCtrl=false, bIgnoreAlt=false):META:COM_QUICKBATARANG,1,-1,-1,\"\",false,true,CI_QuickBatarang");
                }
            }

            //quick batclaw
            if (lineToCheck.Contains("QuickBatClaw") && !lineToCheck.Contains("Unbound"))
            {
                if (read)
                {
                    Program.myFactory.keybinds.quickClawButton.Text = readThis;
                }
                else
                {
                    lineToCheck = stringWriter(Program.myFactory.keybinds.quickClawButton.Text,
                        "\",Command=\"QuickBatClaw\", Shift=false, Control=false, Alt=false, bIgnoreShift=false, bIgnoreCtrl=false, bIgnoreAlt=false):META:COM_QUICKBATCLAW,1,-1,-1,\"\",false,true,CI_QuickBatClaw");
                }
            }

            //throw
            if (lineToCheck.Contains("TriggerThrow") && !lineToCheck.Contains("Unbound"))
            {
                if (read)
                {
                    Program.myFactory.keybinds.throwButton.Text = readThis;
                }
                else
                {
                    lineToCheck = stringWriter(Program.myFactory.keybinds.throwButton.Text,
                        "\",Command=\"TriggerThrow\", Shift=false, Control=false, Alt=false, bIgnoreShift=false, bIgnoreCtrl=false, bIgnoreAlt=false):META:COM_THROW,1,-1,-1,\"\",false,true,CI_Throw");
                }
            }

            //combat takedown
            if (lineToCheck.Contains("TriggerCombatTakedown") && !lineToCheck.Contains("Unbound"))
            {
                if (read)
                {
                    Program.myFactory.keybinds.cTakedownButton.Text = readThis;
                }
                else
                {
                    lineToCheck = stringWriter(Program.myFactory.keybinds.cTakedownButton.Text,
                        "\",Command=\"TriggerCombatTakedown | Button bReadyGadgetButton\", Shift=false, Control=false, Alt=false, bIgnoreShift=false, bIgnoreCtrl=false, bIgnoreAlt=false):META:COM_COMBATTAKEDOWN,1,-1,-1,\"\",false,true,CI_CombatTakeDown");
                }
            }

            //gadget secondary
            if (lineToCheck.Contains("\"SecondaryFireGadget\"") && !lineToCheck.Contains("Unbound"))
            {
                if (read)
                {
                    Program.myFactory.keybinds.gadSecButton.Text = readThis;
                }
                else
                {
                    lineToCheck = stringWriter(Program.myFactory.keybinds.gadSecButton.Text,
                        "\",Command=\"SecondaryFireGadget\", Shift=false, Control=false, Alt=false, bIgnoreShift=false, bIgnoreCtrl=false, bIgnoreAlt=false):META:COM_GADGET_SECONDARY,1,2,-1,\"\",true,true,CI_SecondaryFire");
                }
            }

            //detective mode
            if (lineToCheck.Contains("ForensicMode") && !lineToCheck.Contains("Unbound"))
            {
                if (read)
                {
                    Program.myFactory.keybinds.detButton.Text = readThis;
                }
                else
                {
                    lineToCheck = stringWriter(Program.myFactory.keybinds.detButton.Text,
                        "\",Command=\"ForensicMode | Button aLeftShoulder\", Shift=false, Control=false, Alt=false, bIgnoreShift=false, bIgnoreCtrl=false, bIgnoreAlt=false):META:COM_DETECTIVE_MODE,1,-1,-1,\"\",false,true,CI_VisionModes");
                }
            }

            //use gadget/strike
            if (lineToCheck.Contains("GadgetOrQuickStrike") && !lineToCheck.Contains("Unbound"))
            {
                if (read)
                {
                    Program.myFactory.keybinds.gadStrikeButton.Text = readThis;
                }
                else
                {
                    lineToCheck = stringWriter(Program.myFactory.keybinds.gadStrikeButton.Text,
                        "\",Command=\"GadgetOrQuickStrike | SkipCutscene\", Shift=false, Control=false, Alt=false, bIgnoreShift=true, bIgnoreCtrl=false, bIgnoreAlt=false):META:COM_GRAPPLE_USE_STRIKE,1,0,-1,\"\",false,true,CI_Strike,CI_UseGadget,CI_X");
                }
            }

            //aim gadget/counter/takedown
            if (lineToCheck.Contains("HoldToZoomOrCounter") && !lineToCheck.Contains("Unbound"))
            {
                if (read)
                {
                    Program.myFactory.keybinds.ACTButton.Text = readThis;
                }
                else
                {
                    lineToCheck = stringWriter(Program.myFactory.keybinds.ACTButton.Text,
                        "\",Command=\"HoldToZoomOrCounter | Button bReadyGadgetButton\", Shift = false, Control = false, Alt = false, bIgnoreShift = true, bIgnoreCtrl = false, bIgnoreAlt = false):META: COM_READY,1,1,-1,\"bReadyGadgetButton\",false,false,CI_AimGadget,CI_SilentTakeDown,CI_Y");
                }
            }

            //cape stun
            if (lineToCheck.Contains("DebugMenuNextPage | BlockBreaker") && !lineToCheck.Contains("Unbound"))
            {
                if (read)
                {
                    Program.myFactory.keybinds.capeStunButton.Text = readThis;
                }
                else
                {
                    lineToCheck = stringWriter(Program.myFactory.keybinds.capeStunButton.Text,
                        "\",Command=\"DebugMenuNextPage | BlockBreaker\", Shift=false, Control=false, Alt=false, bIgnoreShift=false, bIgnoreCtrl=false, bIgnoreAlt=false):META:COM_CAPESTUN,1,2,-1,\"\",true,true,CI_CapeStun");
                }
            }

            return lineToCheck;
        }

        /// <summary>
        ///     Reads an input string, modifies it so it is accurately displayed in the Keybindform.
        /// </summary>
        /// <param name="lineToCheck">Line to check</param>
        /// <param name="placeHolder">Contains full string starting with input parameter</param>
        /// <returns>trimmed & corrected input parameter</returns>
        private static string stringModifier(string lineToCheck, string placeHolder)
        {
            if (lineToCheck.Contains("Alt=true"))
            {
                lineToCheck = "A+" + placeHolder.Substring(0, placeHolder.IndexOf("\""));
                return lineToCheck;
            }

            if (lineToCheck.Contains("Shift=true") && !lineToCheck.Contains("bIgnoreShift=true"))
            {
                lineToCheck = "S+" + placeHolder.Substring(0, placeHolder.IndexOf("\""));
                return lineToCheck;
            }

            if (lineToCheck.Contains("Control=true"))
            {
                lineToCheck = "C+" + placeHolder.Substring(0, placeHolder.IndexOf("\""));
                return lineToCheck;
            }

            return placeHolder.Substring(0, placeHolder.IndexOf("\""));
        }

        /// <summary>
        ///     Uses RegEx to detect string pattern in the line to check, to edit ALT/SHIFT/CTRL modifiers
        /// </summary>
        /// <param name="lineToCheck">Line to check</param>
        /// <param name="configLine">Line, starting after the input parameter</param>
        /// <returns>Line with corrected modifiers</returns>
        private static string stringWriter(string lineToCheck, string configLine)
        {
            TimeSpan time = new TimeSpan(0, 0, 0, 3);
            if (lineToCheck.Length <= 2)
            {
                return nameConstant + lineToCheck + configLine;
            }

            if (lineToCheck.Substring(0, 2).Equals("A+"))
            {
                lineToCheck = lineToCheck.Substring(2);
                configLine = Regex.Replace(configLine, @"\bAlt=false\b", "Alt=true", RegexOptions.Compiled, time);
                configLine = Regex.Replace(configLine, @"\bShift=true\b", "Shift=false", RegexOptions.Compiled, time);
                configLine = Regex.Replace(configLine, @"\bControl=true\b", "Control=false", RegexOptions.Compiled,
                    time);
            }

            if (lineToCheck.Substring(0, 2).Equals("S+"))
            {
                lineToCheck = lineToCheck.Substring(2);
                configLine = Regex.Replace(configLine, @"\bAlt=true\b", "Alt=false", RegexOptions.Compiled, time);
                configLine = Regex.Replace(configLine, @"\bShift=false\b", "Shift=true", RegexOptions.Compiled, time);
                configLine = Regex.Replace(configLine, @"\bControl=true\b", "Control=false", RegexOptions.Compiled,
                    time);
            }

            if (lineToCheck.Substring(0, 2).Equals("C+"))
            {
                lineToCheck = lineToCheck.Substring(2);
                configLine = Regex.Replace(configLine, @"\bAlt=true\b", "Alt=false", RegexOptions.Compiled, time);
                configLine = Regex.Replace(configLine, @"\bShift=true\b", "Shift=false", RegexOptions.Compiled, time);
                configLine = Regex.Replace(configLine, @"\bControl=false\b", "Control=true", RegexOptions.Compiled,
                    time);
            }

            return nameConstant + lineToCheck + configLine;
        }

        /// <summary>
        ///     Called by applyButton in Keybindform.
        ///     Checks if there are any unbound keys, sets 'inputsOK' accordingly.
        /// </summary>
        /// <returns>inputsOK</returns>
        public static bool validateInput()
        {
            bool inputsOK = true;
            foreach (Button bt in Program.myFactory.keybinds.buttonList)
            {
                if (bt.Text.Equals("Unbound"))
                {
                    inputsOK = false;
                }
            }

            return inputsOK;
        }
    }
}